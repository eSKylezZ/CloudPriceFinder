class r{cache={};loadingPromises={};availableProviders=[];constructor(){this.initializeAvailableProviders()}async initializeAvailableProviders(){try{const a=await fetch("/data/summary.json");if(a.ok){const e=await a.json();e.providerFiles&&(this.availableProviders=Object.keys(e.providerFiles))}}catch(a){console.error("Failed to initialize available providers:",a)}}async loadProviders(a){const e=a.map(i=>this.loadProvider(i));return(await Promise.all(e)).flat()}async loadProvider(a){if(this.cache[a])return this.cache[a];const e=this.loadingPromises[a];if(e)return await e;this.loadingPromises[a]=this.fetchProviderData(a);try{const s=await this.loadingPromises[a];return this.cache[a]=s,delete this.loadingPromises[a],s}catch(s){throw delete this.loadingPromises[a],s}}async fetchProviderData(a){try{const e=await fetch(`/data/providers/${a}.json`);if(!e.ok)throw new Error(`Failed to load ${a} data: ${e.status}`);const s=await e.json();return console.log(`âœ… Dynamically loaded ${s.length} instances from ${a}`),s}catch(e){return console.error(`Failed to load ${a} data:`,e),[]}}getCachedProviders(){return Object.keys(this.cache)}clearCache(a){a?a.forEach(e=>{delete this.cache[e],delete this.loadingPromises[e]}):(this.cache={},this.loadingPromises={})}getAvailableProviders(){return this.availableProviders}isLoading(a){return!!this.loadingPromises[a]}getCacheStats(){return{cached:Object.keys(this.cache),loading:Object.keys(this.loadingPromises),available:this.availableProviders,cacheSize:Object.values(this.cache).reduce((a,e)=>a+e.length,0)}}}const o=new r;async function c(t){return o.loadProviders(t)}export{o as dynamicLoader,c as loadSelectedProviders};
