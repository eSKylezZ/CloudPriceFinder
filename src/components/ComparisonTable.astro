---
import type { CloudInstance } from '../types';

export interface Props {
  instances: CloudInstance[];
}

const { instances } = Astro.props;

const formatPrice = (price: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 4,
  }).format(price);
};

const getProviderBadgeColor = (provider: string) => {
  const colors: Record<string, string> = {
    aws: 'bg-orange-100 text-orange-800',
    azure: 'bg-blue-100 text-blue-800',
    gcp: 'bg-green-100 text-green-800',
    hetzner: 'bg-red-100 text-red-800',
    oci: 'bg-purple-100 text-purple-800',
    ovh: 'bg-indigo-100 text-indigo-800',
  };
  return colors[provider] || 'bg-gray-100 text-gray-800';
};

const getTypeBadgeColor = (type: string) => {
  const colors: Record<string, string> = {
    'cloud-server': 'bg-blue-100 text-blue-800',
    'cloud-loadbalancer': 'bg-green-100 text-green-800',
    'cloud-volume': 'bg-yellow-100 text-yellow-800',
    'cloud-network': 'bg-purple-100 text-purple-800',
    'cloud-floating-ip': 'bg-pink-100 text-pink-800',
    'cloud-snapshot': 'bg-cyan-100 text-cyan-800',
    'cloud-certificate': 'bg-teal-100 text-teal-800',
    'dedicated-server': 'bg-gray-100 text-gray-800',
    'dedicated-auction': 'bg-orange-100 text-orange-800',
    'dedicated-storage': 'bg-stone-100 text-stone-800',
    'dedicated-colocation': 'bg-slate-100 text-slate-800',
  };
  return colors[type] || 'bg-gray-100 text-gray-800';
};

const formatTypeDisplay = (type: string) => {
  return type.replace('cloud-', '').replace('dedicated-', '').replace('-', ' ');
};

const getCurrentPrice = (instance: any, mode: string = 'ipv4_ipv6') => {
  // Check for new network options structure
  if (instance.networkOptions && typeof instance.networkOptions === 'object') {
    const option = instance.networkOptions[mode];
    if (option && option.available) {
      return {
        hourly: option.hourly || 0,
        monthly: option.monthly || 0,
        savings: option.savings || 0,
        description: option.description || '',
        priceRange: option.priceRange
      };
    }
  }
  
  // Fallback to standard pricing
  return {
    hourly: instance.priceUSD_hourly || instance.priceEUR_hourly_net || 0,
    monthly: instance.priceUSD_monthly || instance.priceEUR_monthly_net || 0,
    savings: 0,
    description: '',
    priceRange: instance.priceRange
  };
};

const formatPriceRange = (priceRange: any, value: number, currency: string = 'EUR') => {
  if (!priceRange || !priceRange.hasVariation) {
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: currency,
      minimumFractionDigits: currency === 'EUR' ? 2 : 4,
    }).format(value);
  }
  
  const minFormatted = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency,
    minimumFractionDigits: currency === 'EUR' ? 2 : 4,
  }).format(priceRange.min);
  
  const maxFormatted = new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: currency,
    minimumFractionDigits: currency === 'EUR' ? 2 : 4,
  }).format(priceRange.max);
  
  return `${minFormatted} - ${maxFormatted}`;
};
---

<div class="bg-white rounded-lg shadow-sm border">
  <div class="px-6 py-4 border-b border-gray-200">
    <div class="flex items-center justify-between">
      <h2 class="text-lg font-semibold text-gray-900">
        Instance Comparison
      </h2>
      <div class="flex items-center space-x-4">
        <select
          id="sort-select"
          class="rounded border-gray-300 text-sm focus:ring-primary-500 focus:border-primary-500"
        >
          <option value="priceUSD_hourly">Price (Low to High)</option>
          <option value="priceUSD_hourly-desc">Price (High to Low)</option>
          <option value="vCPU">vCPU (Low to High)</option>
          <option value="vCPU-desc">vCPU (High to Low)</option>
          <option value="memoryGiB">Memory (Low to High)</option>
          <option value="memoryGiB-desc">Memory (High to Low)</option>
          <option value="provider">Provider (A-Z)</option>
        </select>
        <div class="text-sm text-gray-500" id="result-count">
          {instances.length} instances
        </div>
      </div>
    </div>
  </div>

  <div class="overflow-x-auto max-h-[70vh] overflow-y-auto">
    <table class="min-w-full divide-y divide-gray-200 text-sm" id="instances-table">
      <thead class="bg-gray-50">
        <tr>
          <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky top-0 bg-gray-50">
            Provider
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky top-0 bg-gray-50">
            Instance Type
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky top-0 bg-gray-50">
            Type
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky top-0 bg-gray-50">
            vCPU
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky top-0 bg-gray-50">
            Memory
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky top-0 bg-gray-50">
            Network
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky top-0 bg-gray-50">
            Price/Hour
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky top-0 bg-gray-50">
            Price/Month
          </th>
          <th class="px-3 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider sticky top-0 bg-gray-50">
            Regions
          </th>
        </tr>
      </thead>
      <tbody class="bg-white divide-y divide-gray-200" id="table-body">
        {instances.map((instance) => (
          <tr class="hover:bg-gray-50 instance-row" data-instance={JSON.stringify(instance)}>
            <td class="px-3 py-3 whitespace-nowrap">
              <span class={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getProviderBadgeColor(instance.provider)}`}>
                {instance.provider.toUpperCase()}
              </span>
            </td>
            <td class="px-3 py-3 whitespace-nowrap text-sm font-medium text-gray-900">
              <div class="max-w-24 truncate">
                {instance.instanceType}
              </div>
            </td>
            <td class="px-3 py-3 whitespace-nowrap">
              <div class="flex flex-col space-y-1">
                <span class={`inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium ${getTypeBadgeColor(instance.type)}`}>
                  {formatTypeDisplay(instance.type)}
                </span>
                {instance.platform && (
                  <span class="text-xs text-gray-500 capitalize">
                    {instance.platform}
                  </span>
                )}
              </div>
            </td>
            <td class="px-3 py-3 whitespace-nowrap text-sm text-gray-900">
              {instance.vCPU || '-'}
            </td>
            <td class="px-3 py-3 whitespace-nowrap text-sm text-gray-900">
              {instance.memoryGiB ? `${instance.memoryGiB} GiB` : '-'}
            </td>
            <td class="px-3 py-3 whitespace-nowrap">
              <div class="flex flex-col space-y-1" data-network-info="true">
                <span class="inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium bg-cyan-100 text-cyan-800 pricing-mode-indicator">
                  IPv4 + IPv6
                </span>
                <span class="text-xs text-gray-500 pricing-description">
                  Standard pricing
                </span>
              </div>
            </td>
            <td class="px-3 py-3 whitespace-nowrap text-sm font-medium text-gray-900 pricing-hourly">
              <div class="flex flex-col">
                <span class="pricing-value">
                  {formatPriceRange(
                    instance.priceRange?.hourly, 
                    instance.priceUSD_hourly || instance.priceEUR_hourly_net || 0,
                    instance.priceEUR_hourly_net ? 'EUR' : 'USD'
                  )}
                </span>
                {instance.priceRange?.hourly?.hasVariation && (
                  <span class="text-xs text-orange-600">varies by region</span>
                )}
              </div>
            </td>
            <td class="px-3 py-3 whitespace-nowrap text-sm text-gray-900 pricing-monthly">
              <div class="flex flex-col">
                <span class="pricing-value">
                  {formatPriceRange(
                    instance.priceRange?.monthly, 
                    instance.priceUSD_monthly || instance.priceEUR_monthly_net || 0,
                    instance.priceEUR_monthly_net ? 'EUR' : 'USD'
                  )}
                </span>
                {instance.priceRange?.monthly?.hasVariation && (
                  <span class="text-xs text-orange-600">varies by region</span>
                )}
              </div>
            </td>
            <td class="px-3 py-3 whitespace-nowrap text-sm text-gray-500">
              <div class="flex flex-wrap gap-1 max-w-32">
                {instance.locationDetails ? (
                  instance.locationDetails.slice(0, 3).map((location, index) => (
                    <div class="relative group">
                      <span class="inline-flex items-center space-x-1 cursor-pointer hover:bg-gray-100 px-1 py-0.5 rounded">
                        <img 
                          src={`https://flagsapi.com/${location.countryCode}/flat/16.png`}
                          alt={location.country}
                          class="w-4 h-3 rounded-sm"
                          loading="lazy"
                        />
                        <span class="text-xs">{location.code}</span>
                      </span>
                      <div class="absolute z-10 invisible group-hover:visible bg-gray-900 text-white text-xs px-2 py-1 rounded shadow-lg bottom-full left-1/2 transform -translate-x-1/2 mb-1 whitespace-nowrap">
                        <div class="font-medium">{location.city}, {location.country}</div>
                        <div class="text-gray-300">{location.region}</div>
                        <div class="absolute top-full left-1/2 transform -translate-x-1/2 w-0 h-0 border-l-4 border-r-4 border-t-4 border-transparent border-t-gray-900"></div>
                      </div>
                    </div>
                  ))
                ) : (
                  <div class="max-w-24 truncate">
                    {instance.regions?.slice(0, 2).join(', ')}
                    {instance.regions && instance.regions.length > 2 && '...'}
                  </div>
                )}
                {instance.locationDetails && instance.locationDetails.length > 3 && (
                  <span class="text-xs text-gray-400">+{instance.locationDetails.length - 3}</span>
                )}
              </div>
            </td>
          </tr>
        ))}
      </tbody>
    </table>
  </div>

  {instances.length === 0 && (
    <div class="text-center py-12">
      <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
      </svg>
      <h3 class="mt-2 text-sm font-medium text-gray-900">No instances found</h3>
      <p class="mt-1 text-sm text-gray-500">
        No cloud instances match your current filters. Try adjusting your search criteria.
      </p>
    </div>
  )}
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const sortSelect = document.getElementById('sort-select') as HTMLSelectElement;
    const tableBody = document.getElementById('table-body');
    const resultCount = document.getElementById('result-count');
    
    let allInstances = Array.from(document.querySelectorAll('.instance-row'))
      .map(row => JSON.parse((row as HTMLElement).dataset.instance || '{}'));
    let currentPricingMode = 'ipv4_ipv6';
    
    // Handle sorting
    if (sortSelect) {
      sortSelect.addEventListener('change', () => {
        const [field, direction] = sortSelect.value.split('-');
        sortInstances(field, direction === 'desc' ? 'desc' : 'asc');
      });
    }
    
    // Handle filtering
    document.addEventListener('filtersChanged', (event: Event) => {
      const customEvent = event as CustomEvent;
      const filters = customEvent.detail;
      
      // Update pricing mode based on network options filter
      if (filters.networkOptions?.length === 1) {
        currentPricingMode = filters.networkOptions[0];
      } else {
        currentPricingMode = 'ipv4_ipv6'; // default
      }
      
      filterAndRenderInstances(filters);
    });
    
    function sortInstances(field: string, direction: 'asc' | 'desc') {
      const visibleRows = Array.from(document.querySelectorAll('.instance-row:not(.hidden)'));
      const instances = visibleRows.map(row => JSON.parse((row as HTMLElement).dataset.instance || '{}'));
      
      instances.sort((a, b) => {
        const aVal = a[field];
        const bVal = b[field];
        
        if (aVal === bVal) return 0;
        const comparison = aVal < bVal ? -1 : 1;
        return direction === 'asc' ? comparison : -comparison;
      });
      
      // Re-render sorted instances
      renderInstances(instances);
    }
    
    function filterAndRenderInstances(filters: any) {
      const filtered = allInstances.filter(instance => {
        // Provider filter
        if (filters.providers?.length && !filters.providers.includes(instance.provider)) {
          return false;
        }
        
        // Region filter
        if (filters.regions?.length) {
          let instanceHasSelectedRegion = false;
          
          // Check locationDetails for country match
          if (instance.locationDetails && Array.isArray(instance.locationDetails)) {
            instanceHasSelectedRegion = instance.locationDetails.some(location => 
              filters.regions.includes(location.country)
            );
          }
          // Fallback to legacy regions field
          else if (instance.regions && Array.isArray(instance.regions)) {
            instanceHasSelectedRegion = instance.regions.some(region => 
              filters.regions.includes(region)
            );
          }
          
          if (!instanceHasSelectedRegion) {
            return false;
          }
        }
        
        // Instance type filter
        if (filters.instanceTypes?.length && !filters.instanceTypes.includes(instance.type)) {
          return false;
        }
        
        // IP type filter (support both old and new formats)
        if (filters.ipTypes?.length) {
          const instanceNetworkType = instance.networkType || instance.ipType;
          if (instanceNetworkType && !filters.ipTypes.includes(instanceNetworkType)) {
            return false;
          }
        }
        
        // Network options filter (support both old and new formats)
        if (filters.networkOptions?.length) {
          const instanceNetworkOption = instance.networkType || instance.networkOptions;
          if (instanceNetworkOption && !filters.networkOptions.includes(instanceNetworkOption)) {
            return false;
          }
        }
        
        // vCPU filter
        if (instance.vCPU < filters.minVCPU || instance.vCPU > filters.maxVCPU) {
          return false;
        }
        
        // Memory filter
        if (instance.memoryGiB < filters.minMemory || instance.memoryGiB > filters.maxMemory) {
          return false;
        }
        
        // Price filter
        if (instance.priceUSD_hourly > filters.maxPrice) {
          return false;
        }
        
        return true;
      });
      
      renderInstances(filtered);
      
      if (resultCount) {
        resultCount.textContent = `${filtered.length} instances`;
      }
    }
    
    function updatePricingDisplay() {
      document.querySelectorAll('.instance-row').forEach(row => {
        const instance = JSON.parse((row as HTMLElement).dataset.instance || '{}');
        
        // Update network info
        const networkInfo = row.querySelector('[data-network-info="true"]');
        const indicator = row.querySelector('.pricing-mode-indicator');
        const description = row.querySelector('.pricing-description');
        
        // Update pricing cells
        const hourlyCell = row.querySelector('.pricing-hourly');
        const monthlyCell = row.querySelector('.pricing-monthly');
        
        if (instance.networkOptions && typeof instance.networkOptions === 'object') {
          const option = instance.networkOptions[currentPricingMode];
          
          if (option && option.available) {
            // Update network indicator
            if (indicator) {
              indicator.textContent = currentPricingMode === 'ipv6_only' ? 'IPv6-only' : 'IPv4 + IPv6';
              indicator.className = `inline-flex items-center px-2 py-0.5 rounded-full text-xs font-medium pricing-mode-indicator ${
                currentPricingMode === 'ipv6_only' ? 'bg-green-100 text-green-800' : 'bg-cyan-100 text-cyan-800'
              }`;
            }
            
            // Update description
            if (description) {
              if (currentPricingMode === 'ipv6_only' && option.savings) {
                description.textContent = `Saves €${option.savings.toFixed(2)}/month`;
                description.className = 'text-xs text-green-600 pricing-description';
              } else {
                description.textContent = option.description || 'Standard pricing';
                description.className = 'text-xs text-gray-500 pricing-description';
              }
            }
            
            // Update pricing with range support
            if (hourlyCell && option.hourly !== null) {
              const pricingValue = hourlyCell.querySelector('.pricing-value');
              const variationWarning = hourlyCell.querySelector('.text-xs.text-orange-600');
              
              if (pricingValue) {
                const priceRange = option.priceRange?.hourly;
                if (priceRange && priceRange.hasVariation) {
                  const minFormatted = new Intl.NumberFormat('en-US', {
                    style: 'currency', currency: 'EUR', minimumFractionDigits: 4,
                  }).format(priceRange.min);
                  const maxFormatted = new Intl.NumberFormat('en-US', {
                    style: 'currency', currency: 'EUR', minimumFractionDigits: 4,
                  }).format(priceRange.max);
                  pricingValue.textContent = `${minFormatted} - ${maxFormatted}`;
                  
                  if (variationWarning) variationWarning.style.display = '';
                } else {
                  pricingValue.textContent = new Intl.NumberFormat('en-US', {
                    style: 'currency', currency: 'EUR', minimumFractionDigits: 4,
                  }).format(option.hourly);
                  
                  if (variationWarning) variationWarning.style.display = 'none';
                }
              }
            }
            
            if (monthlyCell && option.monthly !== null) {
              const pricingValue = monthlyCell.querySelector('.pricing-value');
              const variationWarning = monthlyCell.querySelector('.text-xs.text-orange-600');
              
              if (pricingValue) {
                const priceRange = option.priceRange?.monthly;
                if (priceRange && priceRange.hasVariation) {
                  const minFormatted = new Intl.NumberFormat('en-US', {
                    style: 'currency', currency: 'EUR', minimumFractionDigits: 2,
                  }).format(priceRange.min);
                  const maxFormatted = new Intl.NumberFormat('en-US', {
                    style: 'currency', currency: 'EUR', minimumFractionDigits: 2,
                  }).format(priceRange.max);
                  pricingValue.textContent = `${minFormatted} - ${maxFormatted}`;
                  
                  if (variationWarning) variationWarning.style.display = '';
                } else {
                  pricingValue.textContent = new Intl.NumberFormat('en-US', {
                    style: 'currency', currency: 'EUR', minimumFractionDigits: 2,
                  }).format(option.monthly);
                  
                  if (variationWarning) variationWarning.style.display = 'none';
                }
              }
            }
            
            // Show row if pricing is available
            (row as HTMLElement).style.display = '';
          } else {
            // Hide row if pricing mode not available
            if (currentPricingMode !== 'all' && currentPricingMode !== 'ipv4_ipv6') {
              (row as HTMLElement).style.display = 'none';
            }
          }
        }
      });
    }
    
    function renderInstances(instances: any[]) {
      if (!tableBody) return;
      
      // Hide all rows first
      document.querySelectorAll('.instance-row').forEach(row => {
        (row as HTMLElement).style.display = 'none';
      });
      
      // Show matching rows in order
      instances.forEach((instance) => {
        const matchingRow = Array.from(document.querySelectorAll('.instance-row'))
          .find(row => {
            const rowData = JSON.parse((row as HTMLElement).dataset.instance || '{}');
            return rowData.instanceType === instance.instanceType && 
                   rowData.provider === instance.provider;
          });
        
        if (matchingRow) {
          (matchingRow as HTMLElement).style.display = '';
          // Move to correct position
          tableBody.appendChild(matchingRow);
        }
      });
      
      // Update pricing display after rendering
      updatePricingDisplay();
    }
  });
</script>