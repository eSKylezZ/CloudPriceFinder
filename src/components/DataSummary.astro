---
import type { DataSummary } from '../types';

export interface Props {
  summary: DataSummary | null;
}

const { summary } = Astro.props;

const formatPrice = (price: number) => {
  return new Intl.NumberFormat('en-US', {
    style: 'currency',
    currency: 'USD',
    minimumFractionDigits: 4,
  }).format(price);
};

const formatDate = (dateString: string) => {
  return new Intl.DateTimeFormat('en-US', {
    dateStyle: 'medium',
    timeStyle: 'short',
  }).format(new Date(dateString));
};
---

{summary && (
  <div class="bg-white rounded-lg shadow-sm border p-6 mb-8">
    <h2 class="text-lg font-semibold text-gray-900 mb-4">Data Overview</h2>
    
    <div class="grid grid-cols-2 md:grid-cols-4 gap-4">
      <div class="text-center">
        <div class="text-2xl font-bold text-primary-600">
          {summary.totalInstances.toLocaleString()}
        </div>
        <div class="text-sm text-gray-500">Total Instances</div>
      </div>
      
      <div class="text-center">
        <div class="text-2xl font-bold text-primary-600">
          {summary.providersCount}
        </div>
        <div class="text-sm text-gray-500">Providers</div>
      </div>
      
      <div class="text-center">
        <div class="text-2xl font-bold text-primary-600">
          {formatPrice(summary.priceRange.min)}
        </div>
        <div class="text-sm text-gray-500">Lowest Price/hour</div>
      </div>
      
      <div class="text-center">
        <div class="text-2xl font-bold text-primary-600">
          {formatPrice(summary.priceRange.max)}
        </div>
        <div class="text-sm text-gray-500">Highest Price/hour</div>
      </div>
    </div>
    
    <div class="mt-4 pt-4 border-t border-gray-200">
      <div class="flex flex-wrap items-center gap-4 text-sm text-gray-600">
        <div>
          <span class="font-medium">Last Updated: </span>
          {formatDate(summary.lastUpdated)}
        </div>
        
        {summary.byProvider && (
          <div class="flex flex-wrap gap-2">
            {Object.entries(summary.byProvider).map(([provider, count]) => (
              <span class="inline-flex items-center px-2 py-1 rounded-full text-xs bg-gray-100 text-gray-800">
                {provider}: {count}
              </span>
            ))}
          </div>
        )}
      </div>
      
      <div class="mt-3 p-3 bg-blue-50 border border-blue-200 rounded-lg">
        <p class="text-xs text-blue-800">
          <span class="font-medium">Note:</span> Pricing data is collected from provider APIs and supplemented with manually curated data for comprehensive coverage. 
          Some data may not be completely up-to-date, and prices may vary by region, billing period, and specific configurations. 
          Please verify pricing and availability directly with providers before making purchasing decisions.
        </p>
      </div>
    </div>
  </div>
)}

{!summary && (
  <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4 mb-8">
    <div class="flex">
      <div class="flex-shrink-0">
        <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
          <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
        </svg>
      </div>
      <div class="ml-3">
        <h3 class="text-sm font-medium text-yellow-800">No Data Available</h3>
        <div class="mt-1 text-sm text-yellow-700">
          <p>Cloud instance data is not available. Please run <code class="bg-yellow-100 px-1 rounded">npm run fetch-data</code> to collect pricing information.</p>
        </div>
      </div>
    </div>
  </div>
)}