---
import type { CloudInstance } from '../types';
import { getUniqueValues } from '../lib/data-loader';
import CurrencySelector from './CurrencySelector.astro';

export interface Props {
  instances: CloudInstance[];
}

const { instances } = Astro.props;

const providers = getUniqueValues(instances, 'provider');
const instanceTypes = getUniqueValues(instances, 'type');
const ipTypes = getUniqueValues(instances, 'ipType').filter(Boolean);

// Group instance types into categories
const groupedInstanceTypes = {
  cloudServer: instanceTypes.filter(type => 
    type === 'cloud-server' || 
    type === 'cloud-loadbalancer' || 
    type === 'cloud-volume' || 
    type === 'cloud-network' || 
    type === 'cloud-floating-ip' || 
    type === 'cloud-snapshot' || 
    type === 'cloud-certificate'
  ),
  dedicatedServer: instanceTypes.filter(type => 
    type === 'dedicated-server' || 
    type === 'dedicated-auction' || 
    type === 'dedicated-storage' || 
    type === 'dedicated-colocation'
  )
};

// Handle both old and new networkOptions structure
const networkOptionsSet = new Set<string>();
instances.forEach(instance => {
  // New structure: networkOptions is an object with keys
  if (instance.networkOptions && typeof instance.networkOptions === 'object') {
    Object.keys(instance.networkOptions).forEach(key => {
      if (instance.networkOptions![key as keyof typeof instance.networkOptions]?.available) {
        networkOptionsSet.add(key);
      }
    });
  }
  // Legacy structure: networkOptions is a string
  else if (instance.networkOptions && typeof instance.networkOptions === 'string') {
    networkOptionsSet.add(instance.networkOptions);
  }
  // Fallback to networkType or defaultNetworkType
  else if (instance.networkType) {
    networkOptionsSet.add(instance.networkType);
  }
  else if (instance.defaultNetworkType) {
    networkOptionsSet.add(instance.defaultNetworkType);
  }
});
const networkOptions = Array.from(networkOptionsSet).filter(Boolean);

// Extract all unique regions/locations
const regionsSet = new Set<string>();
instances.forEach(instance => {
  if (instance.locationDetails && Array.isArray(instance.locationDetails)) {
    instance.locationDetails.forEach(location => {
      if (location.country) {
        regionsSet.add(location.country);
      }
    });
  } else if (instance.regions && Array.isArray(instance.regions)) {
    instance.regions.forEach(region => {
      regionsSet.add(region);
    });
  }
});
const regions = Array.from(regionsSet).sort();

// Calculate ranges for sliders
const vCPURange = instances.length > 0 ? {
  min: Math.min(...instances.map(i => i.vCPU || 1).filter(Boolean)),
  max: Math.max(...instances.map(i => i.vCPU || 1).filter(Boolean))
} : { min: 1, max: 32 };

const memoryRange = instances.length > 0 ? {
  min: Math.min(...instances.map(i => i.memoryGiB || 1).filter(Boolean)),
  max: Math.max(...instances.map(i => i.memoryGiB || 1).filter(Boolean))
} : { min: 1, max: 256 };

const priceRange = instances.length > 0 ? {
  min: Math.min(...instances.map(i => i.priceUSD_hourly)),
  max: Math.max(...instances.map(i => i.priceUSD_hourly))
} : { min: 0, max: 10 };
---

<div class="bg-white rounded-lg shadow-sm border p-6">
  <h2 class="text-lg font-semibold text-gray-900 mb-4">Filters</h2>
  
  <!-- Currency Selector -->
  <div class="mb-6 pb-4 border-b border-gray-200">
    <CurrencySelector />
  </div>
  
  <div class="space-y-6" id="filter-panel">
    <!-- Provider Filter -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        Cloud Providers
      </label>
      <div class="space-y-2">
        {providers.map((provider) => (
          <label class="flex items-center">
            <input
              type="checkbox"
              name="provider"
              value={provider}
              checked
              class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
            />
            <span class="ml-2 text-sm text-gray-600 capitalize">{provider}</span>
          </label>
        ))}
      </div>
    </div>

    <!-- Region Filter -->
    {regions.length > 0 && (
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        Regions
      </label>
      <div class="space-y-2 max-h-32 overflow-y-auto">
        {regions.map((region) => (
          <label class="flex items-center">
            <input
              type="checkbox"
              name="region"
              value={region}
              checked={region === 'Germany' || region === 'germany'}
              class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
            />
            <span class="ml-2 text-sm text-gray-600">{region}</span>
          </label>
        ))}
      </div>
    </div>
    )}

    <!-- vCPU Range -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        vCPU Count
      </label>
      <div class="space-y-2">
        <div class="flex items-center space-x-2">
          <input
            type="number"
            name="minVCPU"
            placeholder="Min"
            min={vCPURange.min}
            max={vCPURange.max}
            value={vCPURange.min}
            class="w-20 rounded border-gray-300 text-sm focus:ring-primary-500 focus:border-primary-500"
          />
          <span class="text-gray-500">to</span>
          <input
            type="number"
            name="maxVCPU"
            placeholder="Max"
            min={vCPURange.min}
            max={vCPURange.max}
            value={vCPURange.max}
            class="w-20 rounded border-gray-300 text-sm focus:ring-primary-500 focus:border-primary-500"
          />
        </div>
      </div>
    </div>

    <!-- Memory Range -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        Memory (GiB)
      </label>
      <div class="space-y-2">
        <div class="flex items-center space-x-2">
          <input
            type="number"
            name="minMemory"
            placeholder="Min"
            min={memoryRange.min}
            max={memoryRange.max}
            value={memoryRange.min}
            class="w-20 rounded border-gray-300 text-sm focus:ring-primary-500 focus:border-primary-500"
          />
          <span class="text-gray-500">to</span>
          <input
            type="number"
            name="maxMemory"
            placeholder="Max"
            min={memoryRange.min}
            max={memoryRange.max}
            value={memoryRange.max}
            class="w-20 rounded border-gray-300 text-sm focus:ring-primary-500 focus:border-primary-500"
          />
        </div>
      </div>
    </div>

    <!-- Price Range -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        <span id="price-filter-label">Max Price (USD/hour)</span>
      </label>
      <input
        type="number"
        name="maxPrice"
        id="max-price-filter"
        placeholder="Max price ($)"
        min={priceRange.min}
        max={priceRange.max}
        step="0.01"
        value={priceRange.max}
        class="w-full rounded border-gray-300 text-sm focus:ring-primary-500 focus:border-primary-500"
      />
    </div>

    <!-- Instance Type Filter -->
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        Instance Types
      </label>
      <div class="space-y-3 max-h-40 overflow-y-auto">
        
        <!-- Cloud Server Category -->
        {groupedInstanceTypes.cloudServer.length > 0 && (
          <div>
            <div class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-1">Cloud Server</div>
            <div class="space-y-1 ml-2">
              {groupedInstanceTypes.cloudServer.map((type) => (
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    name="instanceType"
                    value={type}
                    checked
                    class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                  />
                  <span class="ml-2 text-sm text-gray-600">
                    {type === 'cloud-server' ? 'Server' : type.replace('cloud-', '').replace('-', ' ')}
                  </span>
                </label>
              ))}
            </div>
          </div>
        )}

        <!-- Dedicated Server Category -->
        {groupedInstanceTypes.dedicatedServer.length > 0 && (
          <div>
            <div class="text-xs font-semibold text-gray-500 uppercase tracking-wider mb-1">Dedicated Server</div>
            <div class="space-y-1 ml-2">
              {groupedInstanceTypes.dedicatedServer.map((type) => (
                <label class="flex items-center">
                  <input
                    type="checkbox"
                    name="instanceType"
                    value={type}
                    checked
                    class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
                  />
                  <span class="ml-2 text-sm text-gray-600">
                    {type === 'dedicated-server' ? 'Server' : 
                     type === 'dedicated-auction' ? 'Auction' :
                     type.replace('dedicated-', '').replace('-', ' ')}
                  </span>
                </label>
              ))}
            </div>
          </div>
        )}
        
      </div>
    </div>

    <!-- IP Type Filter -->
    {ipTypes.length > 0 && (
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        Network Type
      </label>
      <div class="space-y-2">
        {ipTypes.map((ipType) => (
          <label class="flex items-center">
            <input
              type="checkbox"
              name="ipType"
              value={ipType}
              checked
              class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
            />
            <span class="ml-2 text-sm text-gray-600 capitalize">
              {ipType?.replace('_', ' + ') || ''}
            </span>
          </label>
        ))}
      </div>
    </div>
    )}

    <!-- Network Options Filter -->
    {networkOptions.length > 0 && (
    <div>
      <label class="block text-sm font-medium text-gray-700 mb-2">
        Network Options
      </label>
      <div class="space-y-2">
        {networkOptions.map((option) => (
          <label class="flex items-center">
            <input
              type="checkbox"
              name="networkOption"
              value={option}
              checked
              class="rounded border-gray-300 text-primary-600 focus:ring-primary-500"
            />
            <span class="ml-2 text-sm text-gray-600 capitalize">
              {String(option).replace('_', ' ').replace('ipv4 ipv6', 'IPv4 + IPv6').replace('ipv6 only', 'IPv6-only')}
            </span>
          </label>
        ))}
      </div>
    </div>
    )}

    <!-- Action Buttons -->
    <div class="space-y-2 pt-4 border-t border-gray-200">
      <button
        type="button"
        id="apply-filters"
        class="w-full bg-primary-600 text-white py-2 px-4 rounded-md hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-primary-500 focus:ring-offset-2 text-sm"
      >
        Apply Filters
      </button>
      <button
        type="button"
        id="clear-filters"
        class="w-full bg-gray-200 text-gray-800 py-2 px-4 rounded-md hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 text-sm"
      >
        Clear All
      </button>
    </div>
  </div>
</div>

<script>
  // Client-side filtering logic
  document.addEventListener('DOMContentLoaded', () => {
    const applyButton = document.getElementById('apply-filters');
    const clearButton = document.getElementById('clear-filters');
    // const filterPanel = document.getElementById('filter-panel');
    
    if (applyButton) {
      applyButton.addEventListener('click', applyFilters);
    }
    
    if (clearButton) {
      clearButton.addEventListener('click', clearFilters);
    }
    
    // Handle currency changes for price filter
    window.addEventListener('currencyChanged', (event: Event) => {
      const customEvent = event as CustomEvent;
      const { currency, symbol } = customEvent.detail;
      
      // Update price filter label and placeholder
      const priceLabel = document.getElementById('price-filter-label');
      const maxPriceInput = document.getElementById('max-price-filter') as HTMLInputElement;
      
      if (priceLabel) {
        priceLabel.textContent = `Max Price (${currency}/hour)`;
      }
      
      if (maxPriceInput) {
        const placeholder = ['SEK', 'NOK', 'DKK'].includes(currency) 
          ? `Max price (${symbol})` 
          : `Max price (${symbol})`;
        maxPriceInput.placeholder = placeholder;
      }
    });
  });

  async function applyFilters() {
    // Get filter values
    const providers = Array.from(document.querySelectorAll('input[name="provider"]:checked'))
      .map(input => (input as HTMLInputElement).value);
    
    const regions = Array.from(document.querySelectorAll('input[name="region"]:checked'))
      .map(input => (input as HTMLInputElement).value);
    
    const instanceTypes = Array.from(document.querySelectorAll('input[name="instanceType"]:checked'))
      .map(input => (input as HTMLInputElement).value);
    
    const ipTypes = Array.from(document.querySelectorAll('input[name="ipType"]:checked'))
      .map(input => (input as HTMLInputElement).value);
    
    const networkOptions = Array.from(document.querySelectorAll('input[name="networkOption"]:checked'))
      .map(input => (input as HTMLInputElement).value);
    
    const minVCPU = parseInt((document.querySelector('input[name="minVCPU"]') as HTMLInputElement)?.value || '0');
    const maxVCPU = parseInt((document.querySelector('input[name="maxVCPU"]') as HTMLInputElement)?.value || '999');
    const minMemory = parseInt((document.querySelector('input[name="minMemory"]') as HTMLInputElement)?.value || '0');
    const maxMemory = parseInt((document.querySelector('input[name="maxMemory"]') as HTMLInputElement)?.value || '9999');
    const maxPrice = parseFloat((document.querySelector('input[name="maxPrice"]') as HTMLInputElement)?.value || '999');

    // Trigger dynamic provider loading based on selected providers
    if (providers.length > 0) {
      const loadingEvent = new CustomEvent('providersSelectionChanged', {
        detail: {
          selectedProviders: providers,
          action: 'load'
        }
      });
      window.dispatchEvent(loadingEvent);
    }

    // Trigger filter event with filter data
    const filterEvent = new CustomEvent('filtersChanged', {
      detail: {
        providers,
        regions,
        instanceTypes,
        ipTypes,
        networkOptions,
        minVCPU,
        maxVCPU,
        minMemory,
        maxMemory,
        maxPrice
      }
    });
    
    document.dispatchEvent(filterEvent);
  }

  function clearFilters() {
    // Reset all checkboxes to checked
    document.querySelectorAll('input[type="checkbox"]').forEach(input => {
      const inputElement = input as HTMLInputElement;
      if (inputElement.name === 'region') {
        // For regions, only check Germany by default
        inputElement.checked = inputElement.value === 'Germany' || inputElement.value === 'germany';
      } else {
        inputElement.checked = true;
      }
    });
    
    // Reset range inputs to their original values
    const vcpuMin = document.querySelector('input[name="minVCPU"]') as HTMLInputElement;
    const vcpuMax = document.querySelector('input[name="maxVCPU"]') as HTMLInputElement;
    const memMin = document.querySelector('input[name="minMemory"]') as HTMLInputElement;
    const memMax = document.querySelector('input[name="maxMemory"]') as HTMLInputElement;
    const priceMax = document.querySelector('input[name="maxPrice"]') as HTMLInputElement;
    
    if (vcpuMin) vcpuMin.value = vcpuMin.min;
    if (vcpuMax) vcpuMax.value = vcpuMax.max;
    if (memMin) memMin.value = memMin.min;
    if (memMax) memMax.value = memMax.max;
    if (priceMax) priceMax.value = priceMax.max;
    
    // Apply the cleared filters
    applyFilters();
  }
</script>